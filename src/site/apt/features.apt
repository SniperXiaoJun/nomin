Features

  * a mapping isn't just a static document with mapping rules such as XML

    A Nomin mapping listing is nothing else as a groovy class or script. So you are able to use all mechanisms Groovy
    provides. Although you may not know Groovy at all you can easily use Nomin.

  * intuitively looking mapping, even a non-developer can read it

    In the majority of cases a mapping rule is looking as usual assignment.

  * map arbitrary expressions

    In other words now you can map result of calulating arbitrary block of code to properties.
    Expressions have access to objects being mapped and will be calculated at runtime.

  * method invocation

    So there is the ability to map result of method invocation on some property.

  * automapping facility

    Nomin can automatically create mapping rules between properties of the same names.

  * abilities to easily customize the mapping engine behavior

    You can choose a class introspector, advise the engine what is the type of a property with hints including dynamic
    hints which are calculated at mapping time. You are not restricted to use only JavaBeans naming convention, you can
    use anything suitable for your needs.

  * hooks

    Sometimes it needs to perform pre and/or postprocessing entities being mapped. So that code can be placed right in
    a mapping.

  * context management

    Expressions and hooks can use objects from the context passed to the mapper. Context is nothing else as
    just a Map instance with string keys.

  * high performance and thread-safety

    Nomin is developed for working in multithreading environments. Its performance exceeds performance of the frameworks 
    with the same functionality.
  
  * recursive mapping of complex types

  * full supporting collections and arrays

  * implicit conversions of primitive/wrapper types

  * type and null-safe
