   ---
Working with Maps
   ---

Working with Maps

  Nomin can access Map's values using the same approach as accessing a collection/array element.

+---
  a.options["birthdate"] = b.details.birth // options is a Map<String, Object>
  a.options[1] = b.name
  a.options[2] = b.name
+---

  Mapping between Maps is performed as between usual properties. So the following snippet shows the
  idea.

+---
  a.options = b.details.properties // Map<String, Object> <-> Map<Integer, Object>
+---

  You can use {{{hints.html}hint or dynamic hint}} to specify needed types.

+---
  a.options = b.details.properties // Map<Object, Object> <-> Map<Object, Object>
  hint a: Map[String, Person], b: Map[Integer, Employee] // use hint to specify types
  // or
  hint a: Map[String, {
    it instanceof LinearManager ? DetailedPerson : Person // Person is returned if it is an Employee
  }]
+---

  Here is a special case when a custom conversion is used with map properties. A closure gets a Map.Entry value as the
  only parameter and should result exactly with a tuple [key, value]. The next sample shows the idea.

+---
  a.options = b.properties // options is Map<String, String>
  // just convert keys and values to strings
  convert to_a: { e -> [ String.valueOf(e.key), String.valueOf(e.value) ] }
+---
